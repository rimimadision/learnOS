     1                                  ; @petrel 2021/3/28 21:50
     2                                  ; @petrel 2021/3/30 19:25
     3                                  ;	Disable get_cursor, print_string
     4                                  ;	Add edit_video_memory to print string
     5                                  ; @petrel 2021/3/31 15:12
     6                                  ;	Add function rd_disk_m_16
     7                                  ; @petrel 2021/4/1 10:08
     8                                  ; 	Complete todolist 1
     9                                  ;----------------------------------------------------------------------------------
    10                                  ; Simple MBR
    11                                  ; TO-DO LIST
    12                                  ; 1. Change rd_disk_m_16 to avoid the alternation of esi and di (DONE) 
    13                                  ;-----------------------------------------------------------------------------------
    14                                  ; Include some constants
    15                                  
    16                                  %include "boot.inc" 
     1                              <1> ; Loader and Kernel
     2                              <1> 
     3                              <1> LOADER_BASE_ADDR equ  0x900
     4                              <1> LOADER_START_SECTOR equ 0x2
    17                                  
    18                                  ;-----------------------------------------------------------------------------------
    19                                  SECTION MBR vstart=0x7c00
    20 00000000 8CC8                    	mov ax, cs 
    21 00000002 8ED8                    	mov ds, ax
    22 00000004 8EC0                        mov es, ax
    23 00000006 8ED0                    	mov ss, ax
    24 00000008 8EE0                    	mov fs, ax
    25 0000000A BC007C                    	mov sp, 0x7c00
    26                                  
    27                                  ;Set the base address of video memory : 0xb800
    28 0000000D B800B8                  	mov ax, 0xb800
    29 00000010 8EE8                    	mov gs, ax
    30                                  
    31                                  ;------------------------------------------------------------------------------------
    32                                  ; Clear the screen
    33                                  ; Int 0x10 
    34                                  ;-----------------------------------------------------
    35                                  ; para:	ah : fun_id = 0x600 
    36                                  ;		al : num_rows_wrapped_up = 0(mean whole rows)
    37                                  ;		(cl, ch) : begin position
    38                                  ;		(dl, dh) : end position 
    39                                  ; return: no 
    40                                  
    41 00000012 B80006                  	mov ax, 0x600
    42 00000015 BB0007                  	mov bx, 0x700
    43 00000018 B90000                  	mov cx, 0
    44 0000001B BA4F18                  	mov dx, 0x184f
    45                                  
    46 0000001E CD10                    	int 0x10
    47                                  
    48                                  ;------------------------------------------------------------------------------------
    49                                  ; Get the cursor
    50                                  ; Int 0x10
    51                                  ; NOT USED 
    52                                  ;---------------
    53                                  ;	mov ah, 3	
    54                                  ;	mov bh, 0
    55                                  ;	
    56                                  ;	int 0x10
    57                                  ;------------------------------------------------------------------------------------
    58                                  ; Print string
    59                                  ; Int 0x10 
    60                                  ; NOT USED
    61                                  ;------------------
    62                                  ;	mov ax, message
    63                                  ;	mov bp, ax
    64                                  ;
    65                                  ;	mov cx, 5
    66                                  ;	mov ax, 0x1301
    67                                  ;	mov bx, 0x2
    68                                  ;
    69                                  ;	int 0x10
    70                                  ;------------------------------------------------------------------------------------
    71                                  ; Edit the video memory to print string : 1 MBR 
    72                                  ; --------------------
    73 00000020 65C606000031            	mov byte [gs : 0x00], '1'
    74 00000026 65C6060100A4            	mov byte [gs : 0x01], 0xA4
    75                                  
    76 0000002C 65C606020020            	mov byte [gs : 0x02], ' '
    77 00000032 65C6060300A4            	mov byte [gs : 0x03], 0xA4
    78                                  
    79 00000038 65C60604004D            	mov byte [gs : 0x04], 'M'
    80 0000003E 65C6060500A4            	mov byte [gs : 0x05], 0xA4
    81                                  
    82 00000044 65C606060042            	mov byte [gs : 0x06], 'B'
    83 0000004A 65C6060700A4            	mov byte [gs : 0x07], 0xA4
    84                                  
    85 00000050 65C606080052            	mov byte [gs : 0x08], 'R'	
    86 00000056 65C6060900A4            	mov byte [gs : 0x09], 0xA4
    87                                  
    88                                  ;-------------------------------------------------------------------------------------
    89                                  ; Load kernel loader into memory
    90                                  ;-------------------------------------------------------------------
    91 0000005C 66B802000000            	mov eax, LOADER_START_SECTOR ; LAB addr of kernel loader	
    92 00000062 BB0009                  	mov bx, LOADER_BASE_ADDR ; base addr in memory of kernel loader
    93 00000065 B90100                  	mov cx, 1 ; num of sector to read
    94                                  
    95 00000068 E80300                  	call rd_disk_m_16
    96                                  
    97                                  ; Get into kernel loader
    98 0000006B E9(0009)                	jmp LOADER_BASE_ADDR
    99                                   
   100                                  ;--------------------------------------------------------------------------------------
   101                                  ; function : read n sector from disk
   102                                  rd_disk_m_16:
   103                                  ;--------------------------------------------------------------------------------------
   104                                  ; para : eax : LBA sector number
   105                                  ;		 bx : addr to save the content
   106                                  ;        cx : num of sector to read
   107                                  ; return : no
   108                                  
   109                                  ; Save esi, di and dx 
   110 0000006E 57                      	push di
   111 0000006F 56                      	push si
   112 00000070 52                      	push dx
   113                                  
   114 00000071 51                      	push cx
   115 00000072 B110                    	mov cl, 16
   116 00000074 66D3EE                  	shr esi, cl
   117 00000077 56                      	push si
   118 00000078 59                      	pop cx
   119                                  
   120                                  ; Back up eax and cx
   121 00000079 6689C6                  	mov esi, eax
   122 0000007C 89CF                    	mov di, cx
   123                                  	
   124                                  ; Set the num of sector to read
   125 0000007E BAF201                  	mov dx, 0x1f2 ; 0x1f2 port to primary channel - sector count
   126 00000081 88C8                    	mov al, cl
   127 00000083 EE                      	out dx, al
   128                                  
   129                                  ; Recover eax 
   130 00000084 6689F0                  	mov eax, esi
   131                                  
   132                                  ; Set the LBA addr into port 0x1f3~0x1f6
   133                                  	; 7~0 LBA addr into port 0x1f3
   134 00000087 BAF301                  	mov dx, 0x1f3
   135 0000008A EE                      	out dx, al
   136                                  
   137                                  	; 15~8 LBA addr into port 0x1f4
   138 0000008B BAF401                  	mov dx, 0x1f4
   139 0000008E B108                    	mov cl, 8
   140 00000090 66D3E8                  	shr eax, cl
   141 00000093 EE                      	out dx, al
   142                                  
   143                                  	; 23~16 LBA addr into port 0x1f5
   144 00000094 BAF501                  	mov dx, 0x1f5
   145 00000097 66D3E8                  	shr eax, cl
   146 0000009A EE                      	out dx, al
   147                                  
   148                                  	; 27~24 LBA addr into port 0x1f6
   149 0000009B BAF601                  	mov dx, 0x1f6
   150 0000009E 66D3E8                  	shr eax, cl
   151 000000A1 240F                    	and al, 0x0f
   152 000000A3 0CE0                    	or al, 0xe0 ; 1110 set lba mode and master disk
   153 000000A5 EE                      	out dx, al	
   154                                  
   155                                  ; Write read command 0x20 into port 0x1f7 
   156 000000A6 BAF701                  	mov dx, 0x1f7
   157 000000A9 B020                    	mov al, 0x20
   158 000000AB EE                      	out dx, al
   159                                  
   160                                  ; Check disk status from port 0x1f7
   161                                  .not_ready:
   162 000000AC 90                      	nop 
   163 000000AD EC                      	in al, dx	
   164 000000AE 2488                    	and al, 0x88 ; 3 bit = 1 means data transport ready
   165                                  				 ; 7 bit = 1 means disk busy
   166 000000B0 3C08                    	cmp al, 0x08
   167 000000B2 75F8                    	jnz .not_ready
   168                                  
   169                                  ; Read data from port 0x1f0
   170                                  	; calculate times need to read from disk
   171                                  	; di * 512 / (1 word per times) 
   172 000000B4 89F8                    	mov ax, di
   173 000000B6 BA0001                  	mov dx, 256
   174 000000B9 F7E2                    	mul dx
   175 000000BB 89C1                    	mov cx, ax
   176                                  
   177 000000BD BAF001                  	mov dx, 0x1f0
   178                                  .go_on_read:
   179 000000C0 ED                      	in ax, dx
   180 000000C1 8907                    	mov [bx], ax
   181 000000C3 83C302                  	add bx, 2
   182 000000C6 E2F8                    	loop .go_on_read
   183                                  
   184                                  ; Recover esi, di and dx
   185 000000C8 5E                      	pop si
   186 000000C9 B110                    	mov cl, 16
   187 000000CB 66D3E6                  	shl	esi, cl
   188 000000CE 5A                      	pop dx
   189 000000CF 5E                      	pop si
   190 000000D0 5F                      	pop di
   191                                  
   192 000000D1 C3                      	ret
   193                                  
   194                                  ;--------------------------------------------------------------------------------------
   195 000000D2 00<rept>                	times 510-($-$$) db 0
   196 000001FE 55AA                    	db 0x55, 0xaa
